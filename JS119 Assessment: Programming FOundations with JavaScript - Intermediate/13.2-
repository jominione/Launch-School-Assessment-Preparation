// We have been asked to implement a function that determines whether or not 
// a given word is a reserved keyword. We wrote the isReserved function below 
// along with some test cases, but we aren't seeing the expected result. Why 
// not? Fix the code so that it behaves as intended.

const RESERVED_KEYWORDS = ['break', 'case', 'catch', 'class', 'const', 'continue',
  'debugger', 'default', 'delete', 'do', 'else', 'enum', 'export', 'extends', 'finally',
  'for', 'function', 'if', 'implements', 'import', 'in', 'instanceof', 'interface',
  'let', 'new', 'package', 'private', 'protected', 'public', 'return', 'static',
  'super', 'switch', 'this', 'throw', 'try', 'typeof', 'var', 'void', 'while',
  'with', 'yield'];



console.log(isReserved('monkey')); // false
console.log(isReserved('patch'));  // false
console.log(isReserved('switch')); // should be: true

function isReserved(name) {
  RESERVED_KEYWORDS.forEach(reserved => {
    if (name === reserved) {
      return true;
    }
  });

  return false;
}

// Solution: 

// function isReserved(name) {
//   return RESERVED_KEYWORDS.some(reserved => {
//      return name === reserved
//   });
// }

// `forEach` method executes the callback function once for each element of 
// the array, and in the end always returns undefined. The return value of 
// the callback is ignored.

// So the current implementation always return `false` even if argument passed
// is a reserved keyword.

// Instead of using `forEach` method, use `some` method which  which checks 
// whether at least one element in the given array passes the test implemented 
// by the callback function.