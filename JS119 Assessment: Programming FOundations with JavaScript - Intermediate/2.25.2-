// What will the following code log to the console and why? Don't run it until 
// you have tried to answer.

function changeMyWord(word) {
  console.log(word);
  word = word.toUpperCase();
  return word;
}

let myWord = 'Hello';
myWord = changeMyWord(myWord);
console.log(myWord);

// Solution: Will output `Hello` and `HELLO`.

// On lines 4 to 8 a function declaration `changeMyWord` is declared with
// the argument `word`.

// The function body from lines 5 to 7 first invokes `console.log` with the
// argument passed is the value of the parameter `word`.

// The parameter `word` calls the string method `toUpperCase` which returns
// the value of `word` in all uppercase and this value is then assigned to
// `word`. Because strings are immutable the original argument passed to
// `word` is unchanged but `word` has a reassignment so that it now points
// a different reference in memory with the return value of `word.toUpperCase()`.

// The parameter `word` shadows any global variable passed to it as an argument
// so the global variable is unchanged.

// The function body ends by explicitly returning the value of `word` parameter.

// On line 10 a global variable `myWord` is declared and initialised with `'Hello'`.

// On line 11 `myWord` is reassigned the return value of invoking `changeMyWord`
// with argument passed the value of `myWord` which is `'Hello'`.

// On line 12 `console.log` is invoked with the argument passed being the value
// of `myWord`.

// When `changeMyWord(myWord)` is executed it first outputs `Hello` and then returns the value `'HELLO'` so
// `myWord` is reassigned and points to `'HELLO'`. 

// Hence the output is first `Hello` and then `HELLO`.