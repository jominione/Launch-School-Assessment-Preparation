// What is the return value of map in the following code? Why?

let result = [1, 2, 3].map(num => {
               num * num;
             });

console.log(result);

// Solution: The output is `[1, 4, 9]`.

// On line 3, global variable `result` is declared and assigned the return
// value of array `[1, 2, 3]` calling array method `map` with callback function
// passed as argument on lines 3 to 5.

// The callback function is declared as a function expression in arrow function
// form with `num` as parameter. Each value of the caller array is passed
// as argument to the callback function and evaluated on lines 4 returning
// the evaluated value of the expression `num * num`.

// Once each value is passed to the callback function and evaluated, the callback
// function returns a new array `[1, 4, 9]` and this value is assigned to
// `result` variable.

// On line 7, `console.log` is invoked with the argument passed the value of
// `result` logging  `[1, 4, 9]`.


// Correct Solution: map looks at the return value of the callback function 
// to decide the elements in the returned array. Each element in the original 
// array is replaced by what the callback returns for that element. In this 
// case, there's no explicit return statement in the callback function, which 
// means that the callback returns undefined each time.