// What does the following code log to the console, and why?

function barCodeScanner(serial) {
  switch (serial) {
    case '123':
      console.log('Product1');
    case '113':
      console.log('Product2');
    case '142':
      console.log('Product3');
    default:
      console.log('Product not found!');
  }
}

barCodeScanner('113');

// Solution: The program will log the following to the console.

// `Product2`
// `Product3`
// `Product not found!`

// From line 3 to line 14 is a function declaration `barCodeScanner` with
// paramater `serial`.

// The function block from line 4 to line 13 is a switch statement evaluating
// the expression `serial` which is the primitive value `113` on line 16. 
// This expressiion is matches the case on line 7 as well as the statements
// in all the case following until the end of the switch statement because 
// there is return or break statement.


// The output is:

// Product2
// Product3
// Product not found!

// Since the case clauses of the switch statement lack break statements, 
// control falls through from the matching case '113' clause and executes
// the code in the case '142' and default clauses as well. JavaScript doesn't
// care that the criteria for extra case clauses don't match our serial value.
// This fall-through behaviour is often undesirable. To avoid it, you must
// add break statements to each case clause:

function barCodeScanner(serial) {
  switch (serial) {
    case '123':
      console.log('Product1');
      break;
    case '113':
      console.log('Product2');
      break;
    case '142':
      console.log('Product3');
      break;
    default:
      console.log('Product not found!');
  }
}