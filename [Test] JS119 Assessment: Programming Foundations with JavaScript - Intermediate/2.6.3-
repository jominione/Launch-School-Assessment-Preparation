// The following code causes an infinite loop (a loop that never stops 
// iterating). Why?

let counter = 0;

while (counter = 1) {
  console.log(counter);
  counter += 1;

  if (counter > 2) {
    break;
  }
}

// Solution: 

// On line 4 a global variable `counter` is initialised with primitive value `0`.
// Line 6 to 13 defines a while loop with the condition `counter = 1`
// which reassignment of the variable to the value `1`.

// So no matter what value the variable `counter` is it will always evaluate
// to value of 1 in the while condition.

// In the block statement on line 10 there is a if condition `counter > 2`
// that will trigger `break` statement stopping the while loop but since
// `counter` will always evaluate to `1` this if condition will not trigger
// causing an infinite loop.



// Solution: The counter variable in the while condition is reassigned value 1
// for each iteration so the if condition on line 7 that breaks the loop is 
// never triggered.

// The problem occurs on line 3 where we assign 1 to counter inside the 
// conditional part of the while loop. JavaScript accepts this code since
// the assignment always returns a truthy value (1 in this case), the loop
// condition never becomes false. Furthermore, the test on line 7 never becomes
// true since the assignment on line 3 ensures that counter is always equal to 
// 2 when we execute line 7.